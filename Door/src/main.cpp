#include <WiFi.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Keypad.h>
#include <Wire.h>
#include <SPIFFS.h>
#include <Keypad.h>
#include <EEPROM.h>
#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal_I2C.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <ESP32Servo.h>

LiquidCrystal_I2C lcd(0x27, 20, 4); // ƒê·ªãa ch·ªâ I2C th∆∞·ªùng l√† 0x27 ho·∫∑c 0x3F

const char *ssid = "mypc";
const char *password_wifi = "11111111";

const char *server_url = "http://192.168.137.74/api/control.php?esp=1";
const char *server_rfid_url = "http://192.168.137.74/api/rfid.php";
const char *server_pass_url = "http://192.168.137.74/api/password.php";
String apiKeyValue = "tPmAT5Ab3j7F9";

bool screenUpdated = false;
unsigned char id = 0;
unsigned char id_rf = 0;
unsigned char index_t = 0;
unsigned char error_in = 0;
unsigned char in_num = 0, error_pass = 0, isMode = 0;
unsigned long lastFetch = 0;
unsigned long lastScheduleFetch = 0;
String lastUIState = "";    // ƒë·ªÉ tr√°nh ghi ƒë√® nhi·ªÅu l·∫ßn
byte firstScanTag[4] = {0}; // Bi·∫øn l∆∞u d·ªØ li·ªáu UID c·ªßa th·∫ª qu√©t l·∫ßn 1

// üõ† Keypad 4x4
const byte ROWS = 4, COLS = 4;
char keys[ROWS][COLS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}};
byte rowPins[4] = {13, 12, 14, 27}; // ‚úÖ H√†ng - S·ª≠ d·ª•ng GPIO h·ª£p l·ªá
byte colPins[4] = {16, 17, 4, 15};  // ‚úÖ C·ªôt - ƒê·∫£m b·∫£o GPIO h·ª£p l·ªá

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

const byte RFID_SIZE = 4;
int addr = 0;
char password[6] = "11111";
char pass_def[6] = "12395";
char mode_changePass[6] = "*#01#";
char mode_resetPass[6] = "*#02#";
char mode_hardReset[6] = "*#03#";
char mode_addRFID[6] = "*101#";
char mode_delRFID[6] = "*102#";
char mode_delAllRFID[6] = "*103#";
char data_input[6];
char new_pass1[6];
char new_pass2[6];

// üõ† SPI cho RFID (HSPI)
// ‚ö° Chuy·ªÉn Module RFID RC522 sang HSPI
#define PIN_SG90 26
#define SS_PIN 5  // ESP32 pin GIOP5
#define RST_PIN 2 // ESP32 pin GIOP27
Servo sg90;
MFRC522 rfid(SS_PIN, RST_PIN); // Ch√¢n SS v√† RST c·ªßa RFID

MFRC522::MIFARE_Key key;
byte nuidPICC[4];
typedef enum
{
  MODE_ID_RFID_ADD,
  MODE_ID_RFID_FIRST,
  MODE_ID_RFID_SECOND,
} MODE_ID_RFID_E;

// unsigned char MODE = MODE_ID_FINGER_ADD; // Mode = 3
unsigned char MODE_RFID = MODE_ID_RFID_ADD;
void writeEpprom(char data[])
{
  for (unsigned char i = 0; i < 5; i++)
  {
    EEPROM.write(i, data[i]);
  }
  EEPROM.commit();
}

// üìå ƒê·ªçc m·∫≠t kh·∫©u t·ª´ EEPROM
void readEpprom()
{
  for (unsigned char i = 0; i < 5; i++)
  {
    password[i] = EEPROM.read(i);
  }
}

// üìå X√≥a d·ªØ li·ªáu nh·∫≠p
void clear_data_input() // xoa gia tri nhap vao hien tai
{
  int i = 0;
  for (i = 0; i < 6; i++)
  {
    data_input[i] = '\0';
  }
}
unsigned char isBufferdata(char data[]) // Kiem tra buffer da co gia tri chua
{
  unsigned char i = 0;
  for (i = 0; i < 5; i++)
  {
    if (data[i] == '\0')
    {
      return 0;
    }
  }
  return 1;
}

bool compareData(char data1[], char data2[]) // Kiem tra 2 cai buffer co giong nhau hay khong
{
  unsigned char i = 0;
  for (i = 0; i < 5; i++)
  {
    if (data1[i] != data2[i])
    {
      return false;
    }
  }
  return true;
}

void insertData(char data1[], char data2[]) // Gan buffer 2 cho buffer 1
{
  unsigned char i = 0;
  for (i = 0; i < 5; i++)
  {
    data1[i] = data2[i];
  }
}

void getData()
{
  char key = keypad.getKey();
  if (key)
  {
    if (in_num < 5)
    {
      data_input[in_num] = key;
      lcd.setCursor(5 + in_num, 1);
      lcd.print("*");
      in_num++;
    }

    if (in_num == 5)
    {
      Serial.println(data_input);
      in_num = 0;
    }
  }
}

void checkPass() // kiem tra password
{
  getData();
  lcd.setCursor(0, 0);
  lcd.print("Enter Password: "); // ‚Üê ghi ƒë√® d√≤ng 0
  if (isBufferdata(data_input))
  {
    if (compareData(data_input, password)) // Dung pass
    {
      lcd.clear();
      clear_data_input();
      index_t = 3;
    }
    else if (compareData(data_input, mode_changePass))
    {
      // Serial.print("mode_changePass");
      lcd.clear();
      clear_data_input();
      index_t = 1;
    }
    else if (compareData(data_input, mode_resetPass))
    {
      // Serial.print("mode_resetPass");
      lcd.clear();
      clear_data_input();
      index_t = 2;
    }
    else if (compareData(data_input, mode_hardReset))
    {
      lcd.setCursor(0, 0);
      lcd.print("---HardReset---");
      writeEpprom(pass_def);
      insertData(password, pass_def);
      clear_data_input();
      delay(2000);
      lcd.clear();
      index_t = 0;
    }
    else if (compareData(data_input, mode_addRFID))
    {
      lcd.clear();
      clear_data_input();
      index_t = 8;
    }
    else if (compareData(data_input, mode_delRFID))
    {
      lcd.clear();
      clear_data_input();
      index_t = 9;
    }
    else if (compareData(data_input, mode_delAllRFID))
    {
      lcd.clear();
      clear_data_input();
      index_t = 10;
    }
    else
    {
      if (error_pass == 2)
      {
        clear_data_input();
        lcd.clear();
        index_t = 4;
      }
      Serial.print("Error");
      lcd.clear();
      lcd.setCursor(1, 1);
      lcd.print("WRONG PASSWORD");
      clear_data_input();
      error_pass++;
      delay(1000);
      lcd.clear();
    }
  }
}

void openDoor()
{
  // Serial.println("Open The Door");
  lcd.clear();
  lcd.setCursor(1, 0);
  lcd.print("---OPENDOOR---");
  unsigned char pos;
  delay(1000);
  sg90.write(180);
  delay(5000);
  sg90.write(0);
  lcd.clear();
  index_t = 0;
}

// üîí X·ª≠ l√Ω nh·∫≠p sai 3 l·∫ßn - kh√≥a h·ªá th·ªëng 30 gi√¢y
void error()
{
  lcd.clear();
  lcd.setCursor(1, 0);
  lcd.print("WRONG 3 TIME");
  delay(2000);
  lcd.setCursor(1, 1);
  lcd.print("Wait 1 minutes");
  unsigned char minute = 0;
  unsigned char i = 30;
  char buff[3];
  while (i > 0)
  {
    if (i == 1 && minute > 0)
    {
      minute--;
      i = 59;
    }
    if (i == 1 && minute == 0)
    {
      break;
    }
    sprintf(buff, "%.2d", i);
    i--;
    delay(200);
  }
  lcd.clear();
  index_t = 0;
}

void changePass() // Thay ƒë·ªïi m·∫≠t kh·∫©u
{
  lcd.setCursor(0, 0);
  lcd.print("-- Change Pass --");
  delay(3000);
  lcd.setCursor(0, 0);
  lcd.print("--- New Pass ---");

  while (1)
  {
    getData();
    if (isBufferdata(data_input))
    {
      insertData(new_pass1, data_input);
      clear_data_input();
      break;
    }
  }

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("---- AGAIN ----");

  while (1)
  {
    getData();
    if (isBufferdata(data_input))
    {
      insertData(new_pass2, data_input);
      clear_data_input();
      break;
    }
  }

  delay(1000);

  if (compareData(new_pass1, new_pass2)) // N·∫øu m·∫≠t kh·∫©u tr√πng kh·ªõp
  {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("--- Success ---");

    delay(1000);
    writeEpprom(new_pass2);
    insertData(password, new_pass2);

    lcd.clear();
    index_t = 0;
  }
  else // N·∫øu m·∫≠t kh·∫©u kh√¥ng tr√πng
  {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("-- Mismatched --");
    delay(1000);
    lcd.clear();
    index_t = 0;
  }
}

void resetPass()
{
  unsigned char choise = 0;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("RESET PASSWORD");

  getData();
  if (isBufferdata(data_input))
  {
    if (compareData(data_input, password))
    {
      lcd.clear();
      clear_data_input();

      while (1)
      {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("RESET PASSWORD");

        if (choise == 0)
        {
          lcd.setCursor(0, 1);
          lcd.print(">");
          lcd.setCursor(2, 1);
          lcd.print("YES");
          lcd.setCursor(9, 1);
          lcd.print(" ");
          lcd.setCursor(11, 1);
          lcd.print("NO");
        }
        else
        {
          lcd.setCursor(0, 1);
          lcd.print(" ");
          lcd.setCursor(2, 1);
          lcd.print("YES");
          lcd.setCursor(9, 1);
          lcd.print(">");
          lcd.setCursor(11, 1);
          lcd.print("NO");
        }

        char key = keypad.getKey();
        if (key == '*')
        {
          choise = (choise == 1) ? 0 : 1;
        }

        if (key == '#' && choise == 0) // YES - Reset m·∫≠t kh·∫©u
        {
          lcd.clear();
          delay(1000);
          writeEpprom(pass_def);
          insertData(password, pass_def);
          lcd.setCursor(0, 0);
          lcd.print("---Reset ok---");
          delay(1000);
          lcd.clear();
          break;
        }

        if (key == '#' && choise == 1) // NO - Tho√°t
        {
          lcd.clear();
          break;
        }
      }
      index_t = 0;
    }
    else
    {
      index_t = 0;
      lcd.clear();
    }
  }
}

unsigned char numberInput()
{
  char number[5];
  char count_i = 0;
  while (count_i < 2)
  {
    char key = keypad.getKey();
    if (key && key != 'A' && key != 'B' && key != 'C' && key != 'D' && key != '*' && key != '#')
    {
      delay(100);
      lcd.setCursor(10 + count_i, 1);
      lcd.print(key);
      number[count_i] = key;
      count_i++;
    }
  }
  return (number[0] - '0') * 10 + (number[1] - '0');
}

void checkEEPROM()
{
  Serial.println("üîç Ki·ªÉm tra EEPROM l∆∞u th·∫ª RFID...");

  for (int i = 10; i < 50; i += 4) // Duy·ªát qua t·ª´ng th·∫ª RFID trong EEPROM
  {
    Serial.print("üìå ID ");
    Serial.print((i - 10) / 4 + 1); // T√≠nh s·ªë th·ª© t·ª± th·∫ª RFID
    Serial.print(": ");

    bool empty = true; // Bi·∫øn ki·ªÉm tra n·∫øu t·∫•t c·∫£ gi√° tr·ªã = 0

    for (int j = 0; j < 4; j++)
    {
      byte data = EEPROM.read(i + j);
      Serial.print(data, HEX);
      Serial.print(" ");

      if (data != 0xFF && data != 0x00) // N·∫øu c√≥ d·ªØ li·ªáu h·ª£p l·ªá
      {
        empty = false;
      }
    }

    if (empty)
    {
      Serial.print(" -> (Tr·ªëng)");
    }

    Serial.println();
  }
}

bool isAllowedRFIDTag(byte tag[])
{
  int count = 0;
  for (int i = 10; i < 512; i += 4)
  {
    Serial.print("EEPROM: ");
    for (int j = 0; j < 4; j++)
    {
      Serial.print(EEPROM.read(i + j), HEX);
      if (tag[j] == EEPROM.read(i + j))
      {
        count++;
      }
    }
    Serial.println();
    if (count == 4)
    {
      return true; // Th·∫ª ƒë√£ t·ªìn t·∫°i
    }
    count = 0;
  }
  return false;
}

void rfidCheck()
{
  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial())
  {
    byte rfidTag[4];
    Serial.print("RFID TAG: ");
    for (byte i = 0; i < rfid.uid.size; i++)
    {
      rfidTag[i] = rfid.uid.uidByte[i];
      Serial.print(rfidTag[i], HEX);
    }
    Serial.println();

    if (isAllowedRFIDTag(rfidTag))
    {
      lcd.clear();
      index_t = 3;
    }
    else
    {
      if (error_pass == 2)
      {
        lcd.clear();
        index_t = 4;
      }
      Serial.print("Error\n");
      lcd.clear();
      lcd.setCursor(3, 1);
      lcd.print("WRONG RFID");
      error_pass++;
      delay(1000);
      lcd.clear();
    }
    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }
}

void handleWrongRFID()
{
  lcd.clear();

  if (error_pass == 2)
  {
    lcd.setCursor(0, 0);
    lcd.print("SYSTEM");
    lcd.setCursor(0, 1);
    lcd.print("LOCKED");
    index_t = 4;
  }
  else
  {
    Serial.println("Error: Wrong RFID");
    lcd.setCursor(0, 0);
    lcd.print("WRONG RFID");
    error_pass++;
  }

  delay(1000);
}

// Khai b√°o bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u th·∫ª qu√©t l·∫ßn 1

void addRFID()
{
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("ADD NEW RFID");

  Serial.println("üìå ADD_RFID MODE");

  switch (MODE_RFID)
  {
  case MODE_ID_RFID_ADD:
  {
    Serial.println("üìå Nh·∫≠p ID th·∫ª...");

    lcd.setCursor(0, 1);
    lcd.print("Input ID:");

    id_rf = numberInput();
    Serial.println(id_rf);

    if (id_rf == 0)
    {
      lcd.clear();
      lcd.setCursor(3, 1);
      lcd.print("ID ERROR");
      delay(2000);
    }
    else
    {
      MODE_RFID = MODE_ID_RFID_FIRST;
    }
  }
  break;

  case MODE_ID_RFID_FIRST:
  {
    Serial.println("üîÑ Ch·ªù qu√©t th·∫ª l·∫ßn 1...");
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print("Put RFID");

    unsigned long timeout = millis() + 10000;
    while (!rfid.PICC_IsNewCardPresent() && millis() < timeout)
    {
      Serial.println("‚è≥ ƒêang qu√©t... ch∆∞a th·∫•y th·∫ª.");
      delay(500);
    }

    if (millis() >= timeout)
    {
      Serial.println("‚ö† Kh√¥ng ph√°t hi·ªán th·∫ª!");
      lcd.clear();
      lcd.setCursor(0, 1);
      lcd.print("NO CARD DETECTED");
      delay(2000);
      MODE_RFID = MODE_ID_RFID_ADD;
      return;
    }

    if (rfid.PICC_ReadCardSerial())
    {
      Serial.println("‚úÖ ƒê√£ ph√°t hi·ªán th·∫ª! ƒê·ªçc UID...");
      Serial.print("üÜî RFID TAG: ");

      for (byte i = 0; i < 4; i++)
      {
        firstScanTag[i] = rfid.uid.uidByte[i];
        Serial.print(firstScanTag[i], HEX);
        Serial.print(" ");
      }
      Serial.println();

      if (isAllowedRFIDTag(firstScanTag))
      {
        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("RFID EXISTS");
        delay(2000);
        MODE_RFID = MODE_ID_RFID_ADD;
      }
      else
      {
        MODE_RFID = MODE_ID_RFID_SECOND;
      }
    }

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }
  break;

  case MODE_ID_RFID_SECOND:
  {
    Serial.println("üîÑ Ch·ªù qu√©t th·∫ª l·∫ßn 2...");
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print("Put Again");
    delay(1000);

    unsigned long timeout = millis() + 10000;
    while (!rfid.PICC_IsNewCardPresent() && millis() < timeout)
    {
      Serial.println("‚è≥ ƒêang qu√©t l·∫ßn 2...");
      delay(500);
    }

    if (millis() >= timeout)
    {
      Serial.println("‚ö† Kh√¥ng ph√°t hi·ªán th·∫ª l·∫ßn 2!");
      lcd.clear();
      lcd.setCursor(0, 1);
      lcd.print("NO CARD DETECTED");
      delay(2000);
      MODE_RFID = MODE_ID_RFID_ADD;
      return;
    }

    if (rfid.PICC_ReadCardSerial())
    {
      byte secondScanTag[4];
      Serial.print("üîç RFID TAG (L·∫ßn 2): ");
      for (byte i = 0; i < 4; i++)
      {
        secondScanTag[i] = rfid.uid.uidByte[i];
        Serial.print(secondScanTag[i], HEX);
        Serial.print(" ");
      }
      Serial.println();

      if (memcmp(firstScanTag, secondScanTag, 4) != 0)
      {
        Serial.println("‚ö†Ô∏è Th·∫ª kh√¥ng kh·ªõp!");
        lcd.clear();
        lcd.setCursor(0, 1);
        lcd.print("MISMATCHED RFID");
        delay(2000);
        MODE_RFID = MODE_ID_RFID_ADD;
        return;
      }

      // ‚úÖ L∆∞u v√†o EEPROM
      Serial.println("üíæ Ghi EEPROM...");
      for (int i = 0; i < 4; i++)
      {
        EEPROM.write(10 + (id_rf - 1) * 4 + i, secondScanTag[i]);
      }
      EEPROM.commit();

      // ‚úÖ G·ª≠i d·ªØ li·ªáu l√™n server b·∫±ng GET
      if (WiFi.status() == WL_CONNECTED)
      {
        HTTPClient http;

        // Chu·∫©n b·ªã c√°c UID vi·∫øt hoa
        String uid1 = String(secondScanTag[0], HEX);
        uid1.toUpperCase();
        String uid2 = String(secondScanTag[1], HEX);
        uid2.toUpperCase();
        String uid3 = String(secondScanTag[2], HEX);
        uid3.toUpperCase();
        String uid4 = String(secondScanTag[3], HEX);
        uid4.toUpperCase();

        String url = String(server_rfid_url) + "?action=add";
        url += "&id=" + String(id_rf);
        url += "&uid1=" + uid1;
        url += "&uid2=" + uid2;
        url += "&uid3=" + uid3;
        url += "&uid4=" + uid4;

        Serial.println("üîó G·ª≠i URL: " + url);
        http.begin(url);
        int responseCode = http.GET();
        String response = http.getString();

        Serial.print("üì° M√£ ph·∫£n h·ªìi: ");
        Serial.println(responseCode);
        Serial.println("üì§ Server Response: " + response);
        http.end();
      }
      else
      {
        Serial.println("‚ö† Kh√¥ng c√≥ WiFi, b·ªè qua g·ª≠i d·ªØ li·ªáu.");
      }

      // ‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      lcd.clear();
      lcd.setCursor(0, 1);
      lcd.print("Add RFID Done");
      delay(2000);

      // Reset tr·∫°ng th√°i
      MODE_RFID = MODE_ID_RFID_ADD;
      id_rf = 0;
      Serial.println("‚úÖ ADD_OUT");
      index_t = 0; // ‚úÖ THO√ÅT KH·ªéI ch·∫ø ƒë·ªô addRFID sau khi ho√†n t·∫•t
    }

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }
  break;
  }
}

void delRFID()
{
  char buffDisp[20];

  lcd.clear();
  lcd.setCursor(0, 1);
  lcd.print("DELETE RFID");

  Serial.println("üìå DEL_IN");

  lcd.setCursor(0, 1);
  lcd.print("Input ID:");

  id_rf = numberInput(); // Nh·∫≠n ID t·ª´ b√†n ph√≠m

  if (id_rf == 0) // ID #0 kh√¥ng h·ª£p l·ªá
  {
    lcd.clear();
    lcd.setCursor(3, 1);
    lcd.print("ID ERROR");
    delay(2000);
  }
  else
  {
    for (int i = 0; i < 4; i++)
    {
      EEPROM.write(10 + (id_rf - 1) * 4 + i, '\0'); // X√≥a d·ªØ li·ªáu trong EEPROM
    }
    EEPROM.commit();

    if (WiFi.status() == WL_CONNECTED)
    {
      HTTPClient http;
      http.begin(server_rfid_url);
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");

      String postData = "action=delete&id=" + String(id_rf);
      int httpCode = http.POST(postData);
      String response = http.getString();

      Serial.println("üóëÔ∏è Delete RFID SQL: " + response);
      http.end();
    }

    sprintf(buffDisp, "Clear ID: %d Done", id_rf);

    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print(buffDisp);

    Serial.println("‚úÖ DEL_OUT");
    delay(2000);
    lcd.clear();
    index_t = 0;
  }
}

void delAllRFID()
{
  char key = keypad.getKey();

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("CLEAR ALL RFID?");

  if (key == '*')
  {
    isMode = 0; // Ch·ªçn YES
  }
  if (key == '#')
  {
    isMode = 1; // Ch·ªçn NO
  }

  if (isMode == 0) // Hi·ªÉn th·ªã l·ª±a ch·ªçn YES
  {
    lcd.setCursor(0, 1);
    lcd.print("> Yes      No  ");
  }
  else if (isMode == 1) // Hi·ªÉn th·ªã l·ª±a ch·ªçn NO
  {
    lcd.setCursor(0, 1);
    lcd.print("  Yes    > No  ");
  }

  if (key == '0' && isMode == 0) // X√°c nh·∫≠n x√≥a to√†n b·ªô RFID
  {
    for (int i = 10; i < 512; i++)
    {
      EEPROM.write(i, '\0');
    }
    EEPROM.commit();

    if (WiFi.status() == WL_CONNECTED)
    {
      HTTPClient http;
      http.begin(server_rfid_url);
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");

      String postData = "action=delete_all";
      int httpCode = http.POST(postData);
      String response = http.getString();

      Serial.println("üßπ Delete ALL RFID SQL: " + response);
      http.end();
    }

    Serial.println("‚úÖ T·∫•t c·∫£ RFID ƒë√£ b·ªã x√≥a!");
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print("CLEAR DONE");
    delay(2000);
    lcd.clear();
    index_t = 0;
  }

  if (key == '0' && isMode == 1) // Tho√°t m√† kh√¥ng x√≥a
  {
    lcd.clear();
    index_t = 0;
  }
}

void syncFromServer()
{
  if (WiFi.status() != WL_CONNECTED)
  {
    Serial.println("‚ö† Kh√¥ng c√≥ WiFi, b·ªè qua sync.");
    return;
  }

  HTTPClient http;
  http.begin(server_rfid_url + String("?action=sync")); // G·ª≠i GET request
  int httpCode = http.GET();

  if (httpCode == 200)
  {
    String payload = http.getString();
    Serial.println("üì• JSON t·ª´ server:");
    Serial.println(payload);

    StaticJsonDocument<2048> doc;
    DeserializationError error = deserializeJson(doc, payload);
    if (error)
    {
      Serial.println("‚ùå L·ªói ph√¢n t√≠ch JSON");
      http.end();
      return;
    }

    // ‚úÖ 1. ƒê·ªìng b·ªô m·∫≠t kh·∫©u
    const char *serverPass = doc["password"];
    if (serverPass && strlen(serverPass) == 5)
    {
      bool pass_diff = false;
      for (int i = 0; i < 5; i++)
      {
        if (EEPROM.read(i) != serverPass[i])
        {
          pass_diff = true;
          break;
        }
      }

      if (pass_diff)
      {
        Serial.println("üîÅ M·∫≠t kh·∫©u kh√°c ‚Üí c·∫≠p nh·∫≠t EEPROM");
        for (int i = 0; i < 5; i++)
        {
          EEPROM.write(i, serverPass[i]);
          password[i] = serverPass[i];
        }
        EEPROM.commit();
      }
      else
      {
        Serial.println("‚úÖ M·∫≠t kh·∫©u gi·ªëng ‚Üí kh√¥ng thay ƒë·ªïi");
      }
    }
    else
    {
      Serial.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m·∫≠t kh·∫©u h·ª£p l·ªá trong JSON");
    }

    // ‚úÖ 2. ƒê·ªìng b·ªô RFID
    JsonArray list = doc["rfid_list"];
    for (JsonObject rfid : list)
    {
      int id = atoi(rfid["id"]);
      int addr = 10 + (id - 1) * 4;
      byte uid_server[4];

      for (int i = 0; i < 4; i++)
      {
        String key = "uid" + String(i + 1);
        const char *hexStr = rfid[key];
        uid_server[i] = (byte)strtol(hexStr, NULL, 16);
      }

      bool rfid_diff = false;
      for (int i = 0; i < 4; i++)
      {
        if (EEPROM.read(addr + i) != uid_server[i])
        {
          rfid_diff = true;
          break;
        }
      }

      if (rfid_diff)
      {
        Serial.print("üîÅ Ghi l·∫°i RFID ID ");
        Serial.println(id);
        for (int i = 0; i < 4; i++)
        {
          EEPROM.write(addr + i, uid_server[i]);
        }
      }
      else
      {
        Serial.print("‚úÖ RFID ID ");
        Serial.print(id);
        Serial.println(" tr√πng kh·ªõp");
      }
    }

    EEPROM.commit();
    Serial.println("‚úÖ ƒê·ªìng b·ªô RFID & m·∫≠t kh·∫©u ho√†n t·∫•t!");
    checkEEPROM();
  }
  else
  {
    Serial.print("‚ùå L·ªói k·∫øt n·ªëi server, m√£ l·ªói: ");
    Serial.println(httpCode);
  }

  http.end();
}

void fetchSchedule()
{
  HTTPClient http;
  http.begin("http://192.168.137.74/api/control.php?esp=1");
  int httpCode = http.GET();

  if (httpCode == 200)
  {
    String payload = http.getString();
    DynamicJsonDocument doc(2048);
    DeserializationError error = deserializeJson(doc, payload);

    if (!error)
    {
      String hour = String(doc[0]["pump_start_hour"].as<int>());
      String minute = String(doc[0]["pump_start_minute"].as<int>());
      String days = String(doc[0]["repeat_days"].as<String>());

      String timeStr = "Time: " + hour + ":" + (minute.length() == 1 ? "0" + minute : minute);
      String dayStr = "Days: " + days;

      lcd.setCursor(0, 2);
      lcd.print(timeStr + "      "); // padding xo√° d√≤ng c≈©

      lcd.setCursor(0, 3);
      lcd.print(dayStr + "       ");
    }
    else
    {
      lcd.setCursor(0, 2);
      lcd.print("JSON Error         ");
      lcd.setCursor(0, 3);
      lcd.print("                   ");
    }
  }
  else
  {
    lcd.setCursor(0, 2);
    lcd.print("Fetch fail: " + String(httpCode));
    lcd.setCursor(0, 3);
    lcd.print("                   ");
  }

  http.end();
}

void setup()
{
  Serial.begin(115200);

  // üîÑ K·∫øt n·ªëi WiFi
  WiFi.begin(ssid, password_wifi);
  Serial.print("üîÑ ƒêang k·∫øt n·ªëi WiFi");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");
  Serial.print("üì° ƒê·ªãa ch·ªâ IP: ");
  Serial.println(WiFi.localIP());
  sg90.attach(PIN_SG90); // üõ†Ô∏è G·∫Øn servo v√†o ch√¢n GPIO 26

  EEPROM.begin(512);
  EEPROM.commit();
  checkEEPROM();

  // Kh·ªüi t·∫°o SPI v√† RFID
  SPI.begin();
  rfid.PCD_Init();

  // ‚úÖ Kh·ªüi t·∫°o m√†n h√¨nh LCD 20x4
  lcd.init();
  lcd.backlight();

  lcd.setCursor(0, 0);
  lcd.print("SYSTEM INIT...");
  delay(2000);
  lcd.clear();

  readEpprom();     // ƒê·ªçc m·∫≠t kh·∫©u t·ª´ EEPROM
  syncFromServer(); // <=== G·ªåI ƒê·ªíNG B·ªò D·ªÆ LI·ªÜU T·ª™ SQL

  Serial.print("üîë PASSWORD: ");
  Serial.println(password);

  // N·∫øu m·∫≠t kh·∫©u EEPROM ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p, ghi l·∫°i m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
  if (password[0] == 0xFF)
  {
    writeEpprom(pass_def);
    insertData(password, pass_def);
    Serial.print("üîë PASSWORD (M·ªõi): ");
    Serial.println(password);
  }
}

void loop()
{
  // ‚úÖ Hi·ªÉn th·ªã giao di·ªán nh·∫≠p m·∫≠t kh·∫©u n·∫øu ƒëang ·ªü tr·∫°ng th√°i ch·ªù
  if (index_t == 0 && lastUIState != "enter_password")
  {
    lcd.setCursor(0, 0);
    lcd.print("Enter Password:     "); // x√≥a d√≤ng b·∫±ng padding
    lcd.setCursor(0, 1);
    lcd.print("                    "); // d√≤ng tr·ªëng
    lastUIState = "enter_password";
  }

  // ‚úÖ G·ªçi check password & rfid
  checkPass();
  rfidCheck();

  // ‚úÖ C·∫≠p nh·∫≠t l·ªãch m·ªói 30 gi√¢y n·∫øu ƒëang ·ªü tr·∫°ng th√°i ch·ªù
  if (index_t == 0 && millis() - lastScheduleFetch > 1000)
  {
    fetchSchedule();
    lastScheduleFetch = millis();
  }

  // ‚úÖ X·ª≠ l√Ω c√°c tr·∫°ng th√°i h·ªá th·ªëng
  switch (index_t)
  {
  case 1:
    changePass();
    index_t = 0;
    break;

  case 2:
    resetPass();
    index_t = 0;
    break;

  case 3:
    openDoor();
    error_pass = 0;
    index_t = 0;
    break;

  case 4:
    error();
    error_pass = 0;
    index_t = 0;
    break;

  case 8:
    addRFID();
    index_t = 0;
    break;

  case 9:
    delRFID();
    index_t = 0;
    break;

  case 10:
    delAllRFID();
    index_t = 0;
    break;
  }
}
